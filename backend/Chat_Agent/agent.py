
from google.adk.agents import LlmAgent
from pydantic import BaseModel, Field
import os
from dotenv import load_dotenv
import json

load_dotenv()

def merge_json_data(new_json_str: str) -> str:
    """
    Merge existing events.json with new JSON string (generated by agent).
    Save the merged result back to events.json and return it as a string.
    """
    # Path to events.json (one level up from this fileâ€™s directory)
    events_path = os.path.join(os.path.dirname(__file__), '..', 'events.json')
    events_path = os.path.abspath(events_path)

    try:
        # Load existing JSON if file exists, else start empty list
        if os.path.exists(events_path):
            with open(events_path, 'r') as f:
                existing_data = json.load(f)
        else:
            existing_data = []

        # Parse the new JSON string from agent
        new_data = json.loads(new_json_str)

        # Merge them (assuming both are lists of dicts)
        merged_data = existing_data + new_data

        # Save back to events.json
        with open(events_path, 'w') as f:
            json.dump(merged_data, f, indent=4)

        return json.dumps(merged_data, indent=4)
    except Exception as e:
        return str(e)

def events_reader() -> dict:
    """
    Reads the JSON file and returns its content as a dictionary.
    """
    file_path = os.path.join(os.path.dirname(__file__), 'config.json')
    events_path = os.path.join(os.path.dirname(__file__), '..', 'events.json')
    events_path = os.path.abspath(events_path)
    with open(events_path, 'r') as file:
        return json.load(file)

class responseContent(BaseModel):
    subject: str = Field(
        description="Calander"
    )
    body: str = Field(
        description="Awnser what ever question was aksed about the calander"
    )

root_agent = LlmAgent(
    name="Client_agent",
    # https://ai.google.dev/gemini-api/docs/models
    model="gemini-2.5-pro",
    description="Calander Assiatant meant to awnser any questions about the calander",
    instruction="""
    No matter what the user says return a json fileCreate an appropriate subject that sums up the prompt in one word
    You are CalenPal, a helpful and calming assitant that wants to provide the helpful awnsers about the calandar json file
    
    Use the tool `events_reader` to read the events.json file and that is the clander you will be basing all your awnsers off of

    THe Stress_lvl is out of 10 with 10 being the most stressed
        - Hangouts should be around 3 or lower stress but if there are already multiple hangouts near by consider increasing the stress level
        -Consider that the date is 9/28/2025 so if you make events has to be after that date
    if: input start with "MAKE EVENT" followed by a description of the event use tool merge_json_data to merge the new event with the existing events in events.json
          - first get the description and then make a json file with the following structure:
          {
            "date": "YYYY-MM-DD based off of what was said and if date was never mentiond find the best date based off of the stress level and other events in the next 30 days",
            "time": "HH:MM based off of what was said and if time was never mentiond find the best time based off of the stress level and other events in the same day as date",
            "title": "make a title based off of the description",
            "description": "description of the event based off of what was said",
            "stress": "1-10 based off of what was said and if there are multiple events that day consider increasing the stress level ecpically if they are all high stress events",
          }
        - second output the json file as a string in the body field of the response
        {
        "subject": "Event Created",
        "body": "Your event titled 'Event Title' has been created successfully. Here are the details:\n\nDate: YYYY-MM-DD\nTime: HH:MM\nDescription: Event description\nStress Level: X"
        }

    PLease try your best to awnser any questions related to the events

    IMPORTANT: Your response MUST be valid JSON matching this structure:
        {
            "subject": "Subject line here",
            "body": "A calming and not freindly message to user about the calendar question asked",
        }

    if cant read Json file then out put
    {
    "subject": "Error",
    "body": "I am sorry but I am unable to read the calendar file at the moment. Please try again later."
    }

    IF YOU ARE UNSURE RETURN:
    {
    "subject": "Unsure",
    "body": "I am not sure how to help with that. Please ask a different question or provide more details so I can assist you better."
    }
    DO NOT include any explanations or additional text outside the JSON response.

    When the user wants to schedule an event, try to:
        1. avoid weekdays
        2. avoid high stress days (stress lvl 7 or higher)
        3. avoid days with multiple events already scheduled
        4. avoid high stress weeks (weeks with multiple high stress days)

    """,
    #input_schema=InputSchema,
    output_schema=responseContent,
    output_key="response",
    tools=[events_reader,merge_json_data]
)

